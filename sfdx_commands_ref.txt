=== force:limits:api:display
Usage: sfdx force:limits:api:display [-u <string>] [--json] [--loglevel <string>]

display current org’s limits

 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

When you execute this command in a project, it provides limit information for your default scratch org.

Examples:
   $ sfdx force:limits:api:display
   $ sfdx force:limits:api:display -u me@my.org


=== force:lightning:app:create
Usage: sfdx force:lightning:app:create -n <string> [-t <string>] [-d <string>] [-a <string>] [--json] [--loglevel <string>]

create a lightning app

 -a, --apiversion APIVERSION # api version number (40.0*,39.0)
 -n, --appname APPNAME       # name of the generated lightning app
 -d, --outputdir OUTPUTDIR   # folder for saving the created files
 -t, --template TEMPLATE     # template to use for file creation (DefaultLightningApp*)
 --json                      # json output
 --loglevel LOGLEVEL         # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If not supplied, the apiversion, template, and outputdir use default values.
The outputdir can be an absolute path or relative to the current working directory.

Examples:
   $ sfdx force:lightning:app:create -n myapp
   $ sfdx force:lightning:app:create -n myapp -d lightning


=== force:data:bulk:delete
Usage: sfdx force:data:bulk:delete -s <string> -f <file> [-w <minutes>] [-u <string>] [--json] [--loglevel <string>]

bulk delete records from a csv file

 -f, --csvfile CSVFILE               # the path to the csv file containing the ids of the records to delete
 -s, --sobjecttype SOBJECTTYPE       # the sobject type of the records you’re deleting
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -w, --wait WAIT                     # the number of minutes to wait for the command to complete before displaying the results
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

The file must be a CSV file with only one column: "Id".
One job can contain many batches, depending on the length of the CSV file.
Returns a job ID and a batch ID. Use these IDs to check job status with data:bulk:status.

Examples:
   $ sfdx force:data:bulk:delete -s Account -f ./path/to/file.csv
   $ sfdx force:data:bulk:delete -s MyObject__c -f ./path/to/file.csv


=== force:data:bulk:status
Usage: sfdx force:data:bulk:status -i <id> [-b <id>] [-u <string>] [--json] [--loglevel <string>]

view the status of a bulk data load job or batch

 -b, --batchid BATCHID               # the id of the batch whose status you want to view
 -i, --jobid JOBID                   # the id of the job you want to view or of the job whose batch you want to view
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Examples:
   $ sfdx force:data:bulk:status -i 750xx000000005sAAA
   $ sfdx force:data:bulk:status -i 750xx000000005sAAA -b 751xx000000005nAAA


=== force:data:bulk:upsert
Usage: sfdx force:data:bulk:upsert -s <string> -f <file> [-i <id>] [-w <minutes>] [-u <string>] [--json] [--loglevel <string>]

bulk upsert records from a csv file

 -f, --csvfile CSVFILE               # the path to the csv file that defines the records to upsert
 -i, --externalid EXTERNALID         # the column name of the external id; if not provided, an arbitrary id is used
 -s, --sobjecttype SOBJECTTYPE       # the sobject type of the records you want to upsert
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -w, --wait WAIT                     # the number of minutes to wait for the command to complete before displaying the results
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Inserts or updates records from a CSV file. 
One job can contain many batches, depending on the length of the CSV file.
Returns a job ID and a batch ID. Use these IDs to check job status with data:bulk:status.

For information about formatting your CSV file, see "Prepare CSV Files" in the Bulk API Developer Guide.

Examples:
   $ sfdx force:data:bulk:upsert -s MyObject__c -f ./path/to/file.csv -i MyField__c
   $ sfdx force:data:bulk:upsert -s MyObject__c -f ./path/to/file.csv -i Id -w 2


=== force:apex:class:create
Usage: sfdx force:apex:class:create -n <string> [-t <string>] [-d <string>] [-a <string>] [--json] [--loglevel <string>]

create an apex class

 -a, --apiversion APIVERSION # api version number (40.0*,39.0)
 -n, --classname CLASSNAME   # name of the generated apex class
 -d, --outputdir OUTPUTDIR   # folder for saving the created files
 -t, --template TEMPLATE     # template to use for file creation (DefaultApexClass*,ApexException,ApexUnitTest,InboundEmailService)
 --json                      # json output
 --loglevel LOGLEVEL         # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If not supplied, the apiversion, template, and outputdir use default values.
The outputdir can be an absolute path or relative to the current working directory.

Examples:
   $ sfdx force:apex:class:create -n MyClass
   $ sfdx force:apex:class:create -n MyClass -d classes


=== force:doc:commands:display
Usage: sfdx force:doc:commands:display [--json] [--loglevel <string>]

display help for force commands

 --json              # format output as json
 --loglevel LOGLEVEL # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Displays help for force commands.


=== force:doc:commands:list
Usage: sfdx force:doc:commands:list [--json] [--loglevel <string>]

list the force commands

 --json              # format output as json
 --loglevel LOGLEVEL # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Displays a list of force commands and their descriptions.


=== force:visualforce:component:create
Usage: sfdx force:visualforce:component:create -n <string> -l <string> [-t <string>] [-d <string>] [-a <string>] [--json] [--loglevel <string>]

create a visualforce component

 -a, --apiversion APIVERSION       # api version number (40.0*,39.0)
 -n, --componentname COMPONENTNAME # name of the generated visualforce component
 -l, --label LABEL                 # visualforce component label
 -d, --outputdir OUTPUTDIR         # folder for saving the created files
 -t, --template TEMPLATE           # template to use for file creation (DefaultVFComponent*)
 --json                            # json output
 --loglevel LOGLEVEL               # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If not supplied, the apiversion, template, and outputdir use default values.
The outputdir can be an absolute path or relative to the current working directory.
Name and label are required.

Examples:
   $ sfdx force:visualforce:component:create -n mycomponent -l mylabel
   $ sfdx force:visualforce:component:create -n mycomponent -l mylabel -d components


=== force:lightning:component:create
Usage: sfdx force:lightning:component:create -n <string> [-t <string>] [-d <string>] [-a <string>] [--json] [--loglevel <string>]

create a lightning component

 -a, --apiversion APIVERSION       # api version number (40.0*,39.0)
 -n, --componentname COMPONENTNAME # name of the generated lightning component
 -d, --outputdir OUTPUTDIR         # folder for saving the created files
 -t, --template TEMPLATE           # template to use for file creation (DefaultLightningCmp*)
 --json                            # json output
 --loglevel LOGLEVEL               # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If not supplied, the apiversion, template, and outputdir use default values.
The outputdir can be an absolute path or relative to the current working directory.

Examples:
   $ sfdx force:lightning:component:create -n mycomponent
   $ sfdx force:lightning:component:create -n mycomponent -d lightning


=== force:mdapi:convert
Usage: sfdx force:mdapi:convert -r <directory> [-d <directory>] [--json] [--loglevel <string>]

convert metadata api source into the sfdx source format

 -d, --outputdir OUTPUTDIR # the output directory to store the sfdx source
 -r, --rootdir ROOTDIR     # the root directory containing the metadata api source
 --json                    # format output as json
 --loglevel LOGLEVEL       # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

To work with source that you retrieved via Metadata API using the Salesforce DX tools, convert the source to the Salesforce DX format using "sfdx force:mdapi:convert".

To convert the source back to the Metadata API format, so that you can deploy it using "sfdx force:mdapi:deploy", run "sfdx force:source:convert".

Examples:
   $ sfdx force:mdapi:convert -r <path to source>
   $ sfdx force:mdapi:convert -r <path to source> -d <path to outputdir>


=== force:source:convert
Usage: sfdx force:source:convert [-r <directory>] [-d <directory>] [-n <string>] [--json] [--loglevel <string>]

convert sfdx source into the metadata api source format

 -d, --outputdir OUTPUTDIR     # the output directory to export the metadata api source to
 -n, --packagename PACKAGENAME # the name of the package to associate with the metadata api source
 -r, --rootdir ROOTDIR         # the source directory for the source to be converted
 --json                        # format output as json
 --loglevel LOGLEVEL           # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

To convert Salesforce DX–formatted source into a format that you can deploy using Metadata API, run "sfdx force:source:convert". Then deploy the source using "sfdx force:mdapi:deploy".

To convert Metadata API–formatted source into the Salesforce DX format, run "sfdx force:mdapi:convert".

Examples:
   $ sfdx force:source:convert -r <path to source>
   $ sfdx force:source:convert -r <path to source> -d <path to output dir>


=== force:org:create
Usage: sfdx force:org:create name=value... [-f <filepath>] [-n] [-i <string>] [-s] [-a <string>] [-w <minutes>] [-v <string>] [--json] [--loglevel <string>]

create a scratch org

 -i, --clientid CLIENTID                         # connected app consumer key
 -f, --definitionfile DEFINITIONFILE             # path to a scratch org definition file
 -n, --nonamespace                               # creates the scratch org with no namespace
 -a, --setalias SETALIAS                         # set an alias for for the created scratch org
 -s, --setdefaultusername                        # set the created org as the default username
 -v, --targetdevhubusername TARGETDEVHUBUSERNAME # username for the dev hub org; overrides default dev hub org
 -w, --wait WAIT                                 # the streaming client socket timeout (in minutes) (default:6, min:2)
 --json                                          # format output as json
 --loglevel LOGLEVEL                             # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

To set up a connected app for your new scratch org, specify the value that was returned when you created a connected app in your Dev Hub org as --clientid.

Examples:
   $ sfdx force:org:create -f config/enterprise-scratch-def.json -a TestOrg1
   $ sfdx force:org:create -a MyDevOrg -s -v me@myhub.org edition=Developer
   $ sfdx force:org:create -f config/enterprise-scratch-def.json -a OrgWithOverrides username=testuser1@mycompany.org


=== force:package2:create
Usage: sfdx force:package2:create -n <string> [-d <string>] [-s <string>] [-v <string>] [--json] [--loglevel <string>]

create a package2

 -d, --description DESCRIPTION                   # package2 description
 -n, --name NAME                                 # package2 name
 -s, --namespace NAMESPACE                       # the package2 global namespace
 -v, --targetdevhubusername TARGETDEVHUBUSERNAME # username for the dev hub org; overrides default dev hub org
 --json                                          # format output as json
 --loglevel LOGLEVEL                             # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

First, use this command to create a package2. Then create a package2 version.

Examples:
   $ sfdx force:package2:create --name PackageName --namespace MyNamespace --description 'My New Package'

Run 'sfdx force:package2:list' to list all package2 packages in the dev hub org.


=== force:project:create
Usage: sfdx force:project:create -n <string> [-t <string>] [-d <string>] [-s <string>] [-p <string>] [--json] [--loglevel <string>]

create a new SFDX project

 -p, --defaultpackagedir DEFAULTPACKAGEDIR # default package directory name (force-app*)
 -s, --namespace NAMESPACE                 # project associated namespace
 -d, --outputdir OUTPUTDIR                 # folder for saving the created files
 -n, --projectname PROJECTNAME             # name of the generated project
 -t, --template TEMPLATE                   # template to use for file creation (Defaultsfdx-project.json*)
 --json                                    # json output
 --loglevel LOGLEVEL                       # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Default values are used if the template, namespace, defaultpackagedir, and outputdir aren’t supplied.
The outputdir can be an absolute path or relative to the current working directory.

Examples:
   $ sfdx force:project:create --projectname mywork
   $ sfdx force:project:create --projectname mywork --defaultpackagedir myapp


=== force:org:delete
Usage: sfdx force:org:delete -u <string> [-p] [--json] [--loglevel <string>]

mark a scratch org for deletion

 -p, --noprompt                      # no prompt to confirm deletion
 -u, --targetusername TARGETUSERNAME # username for the target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

To mark the org for deletion without being prompted to confirm, specify --noprompt.

Examples:
   $ sfdx force:org:delete -u me@my.org
   $ sfdx force:org:delete -u MyOrgAlias -p


=== force:mdapi:deploy
Usage: sfdx force:mdapi:deploy (-c | -i <id>) (-d <directory> | -f <filepath>) [-w <minutes>] [-l <string>] [-r <string>...] [-e <boolean>] [-u <string>] [--json] [--loglevel <string>] [--verbose]

deploys metadata to an org using metadata api

 -c, --checkonly                       # validate deploy but don’t save to org (default: false)
 -d, --deploydir DEPLOYDIR             # root of directory tree of files to deploy
 -i, --jobid JOBID                     # job ID of the deployment you want to check
 -e, --rollbackonerror ROLLBACKONERROR # roll back deployment on any failure (default: true) (default:true)
 -r, --runtests RUNTESTS               # tests to run if --testlevel RunSpecifiedTests
 -u, --targetusername TARGETUSERNAME   # username for the target org; overrides default target org
 -l, --testlevel TESTLEVEL             # deployment testing level (NoTestRun,RunSpecifiedTests,RunLocalTests,RunAllTestsInOrg)
 -w, --wait WAIT                       # wait time for command to finish in minutes (default: 0)
 -f, --zipfile ZIPFILE                 # path to .zip file of metadata to deploy
 --json                                # format output as json
 --loglevel LOGLEVEL                   # logging level for this command invocation (error*,trace,debug,info,warn,fatal)
 --verbose                             # verbose output of deploy results

Specify the location of the files to deploy as a .zip file or by the root of the directory tree containing the files. To check the status of a deployment, specify its job ID.

The default value of --rollbackonerror is true, but the corresponding parameter in the Metadata API deploy() call defaults to false.


=== force:org:display
Usage: sfdx force:org:display [-u <string>] [--json] [--loglevel <string>] [--verbose]

get org description

 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)
 --verbose                           # emit additional command output to stdout

Output includes your access token, client ID, connected status, org ID, instance URL, username, and alias, if applicable. Use --verbose to include the SFDX auth URL.

Examples:
   $ sfdx force:org:display
   $ sfdx force:org:display -u me@my.org
   $ sfdx force:org:display -u TestOrg1 --json
   $ sfdx force:org:display -u TestOrg1 --json > tmp/MyOrgDesc.json


=== force:lightning:event:create
Usage: sfdx force:lightning:event:create -n <string> [-t <string>] [-d <string>] [-a <string>] [--json] [--loglevel <string>]

create a lightning event

 -a, --apiversion APIVERSION # api version number (40.0*,39.0)
 -n, --eventname EVENTNAME   # name of the generated lightning event
 -d, --outputdir OUTPUTDIR   # folder for saving the created files
 -t, --template TEMPLATE     # template to use for file creation (DefaultLightningEvt*)
 --json                      # json output
 --loglevel LOGLEVEL         # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If not supplied, the apiversion, template, and outputdir use default values.
The outputdir can be an absolute path or relative to the current working directory.

Examples:
   $ sfdx force:lightning:event:create -n myevent
   $ sfdx force:lightning:event:create -n myevent -d lightning


=== force:apex:execute
Usage: sfdx force:apex:execute [-f <file>] [-u <string>] [--json] [--loglevel <string>]

execute anonymous apex code

 -f, --apexcodefile APEXCODEFILE     # path to a local file containing apex code
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Executes one or more lines of Apex code, or executes the code in a local file.
Before you enter code, run this command with no parameters to get a prompt.
From the prompt, all commands are executed in a single execute anonymous request.
For more information, see "Anonymous Blocks" in the Apex Developer Guide.

Examples:
   $ sfdx force:apex:execute -f ~/test.apex

   $ sfdx force:apex:execute 
   >> Start typing Apex code. Press the Enter key after each line, 
   >> then press CTRL+D when finished.


=== force:config:get
Usage: sfdx force:config:get name=value... [--json] [--loglevel <string>] [--verbose]

get config var value(s) for given name(s)

 --json              # format output as json
 --loglevel LOGLEVEL # logging level for this command invocation (error*,trace,debug,info,warn,fatal)
 --verbose           # emit additional command output to stdout

To see your default scratch org username, include "defaultusername".
To see your default Dev Hub, include "defaultdevhubusername".
To see your default instance URL, include "instanceUrl".
To see the locations where your values are set, include the --verbose flag.

Examples:
   $ sfdx force:config:get defaultusername
   $ sfdx force:config:get defaultusername defaultdevhubusername instanceUrl
   $ sfdx force:config:get defaultusername defaultdevhubusername --verbose


=== force:package:install
Usage: sfdx force:package:install -i <id> [-w <minutes>] [-k <string>] [-u <string>] [--json] [--loglevel <string>]

install a package in the target org

 -i, --id ID                           # id of the package to install (starts with 04t)
 -k, --installationkey INSTALLATIONKEY # installation key for key-protected package (default: null)
 -u, --targetusername TARGETUSERNAME   # username for the target org; overrides default target org
 -w, --wait WAIT                       # number of minutes to wait for installation status
 --json                                # format output as json
 --loglevel LOGLEVEL                   # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Supply the ID of the package you want to install. Installs to the default username org unless you supply the username for a different target org.

Examples:
   $ sfdx force:package:install -i 04t6A0000004eytQAA
   $ sfdx force:package:install -i 04t6A0000004eytQAA -u me@my.org


=== force:package:install:get
Usage: sfdx force:package:install:get -i <id> [-u <string>] [--json] [--loglevel <string>]

retrieve status of package install request

 -i, --requestid REQUESTID           # packageinstallrequest id
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Displays the status of a package install request.


=== force:package2:installed:list
Usage: sfdx force:package2:installed:list [-u <string>] [--json] [--loglevel <string>]

list the org’s installed subscriber package2 versions

 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Lists all subscriber package2 versions installed in the target org.


=== force:lightning:interface:create
Usage: sfdx force:lightning:interface:create -n <string> [-t <string>] [-d <string>] [-a <string>] [--json] [--loglevel <string>]

create a lightning interface

 -a, --apiversion APIVERSION       # api version number (40.0*,39.0)
 -n, --interfacename INTERFACENAME # name of the generated lightning interface
 -d, --outputdir OUTPUTDIR         # folder for saving the created files
 -t, --template TEMPLATE           # template to use for file creation (DefaultLightningIntf*)
 --json                            # json output
 --loglevel LOGLEVEL               # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If not supplied, the apiversion, template, and outputdir use default values.
The outputdir can be an absolute path or relative to the current working directory.

Examples:
   $ sfdx force:lightning:interface:create -n myinterface
   $ sfdx force:lightning:interface:create -n myinterface -d lightning


=== force:auth:jwt:grant
Usage: sfdx force:auth:jwt:grant -u <string> -f <filepath> -i <string> [-r <url>] [-d] [-s] [-a <string>] [--json] [--loglevel <string>]

authorize an org using the jwt flow

 -i, --clientid CLIENTID        # oauth client id (sometimes called the consumer key)
 -r, --instanceurl INSTANCEURL  # the login url of the instance the org lives on
 -f, --jwtkeyfile JWTKEYFILE    # path to a file containing the private key
 -a, --setalias SETALIAS        # set an alias for for the authenticated org
 -d, --setdefaultdevhubusername # set the authenticated org as the default dev hub org for scratch org creation
 -s, --setdefaultusername       # set the authenticated org as the default username that all commands run against
 -u, --username USERNAME        # authentication username
 --json                         # format output as json
 --loglevel LOGLEVEL            # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Authorizes a Salesforce org using a private key file that has been uploaded to a personal connected app.

Examples:
   $ sfdx force:auth:jwt:grant -u me@my.org -f <path to jwt key file> -i <oauth client id>
   $ sfdx force:auth:jwt:grant -u me@my.org -f <path to jwt key file> -i <oauth client id> -s -a MyDefaultOrg


=== force:alias:list
Usage: sfdx force:alias:list [--json] [--loglevel <string>]

list username aliases for sfdx

 --json              # format output as json
 --loglevel LOGLEVEL # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Example: 
   $ sfdx force:alias:list


=== force:config:list
Usage: sfdx force:config:list [--json] [--loglevel <string>]

list config vars for sfdx

 --json              # format output as json
 --loglevel LOGLEVEL # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Lists the config variables that the Salesforce CLI uses for various commands and tasks.


=== force:org:list
Usage: sfdx force:org:list [--all] [--clean] [-p] [--json] [--loglevel <string>]

list all active orgs you’ve created or authenticated to

 -p, --noprompt      # do not prompt for confirmation
 --all               # include expired, deleted, and unknown-status scratch orgs
 --clean             # remove all local org authorizations for non-active orgs
 --json              # format output as json
 --loglevel LOGLEVEL # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Examples:
   $ sfdx force:org:list
   $ sfdx force:org:list --verbose --json
   $ sfdx force:org:list --verbose --json > tmp/MyOrgList.json


=== force:package2:list
Usage: sfdx force:package2:list [-v <string>] [--json] [--loglevel <string>]

list all package2 packages in the dev hub org

 -v, --targetdevhubusername TARGETDEVHUBUSERNAME # username for the dev hub org; overrides default dev hub org
 --json                                          # format output as json
 --loglevel LOGLEVEL                             # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

You can view the namespace, ID, and subscriber package2 ID for each package2.


=== force:apex:log:get
Usage: sfdx force:apex:log:get -i <id> [-u <string>] [--json] [--loglevel <string>]

fetch a debug log

 -i, --logid LOGID                   # id of the log to display
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

When you execute this command in a project, it fetches the specified log from your default scratch org.To get the IDs for your debug logs, run "sfdx force:apex:log:list".

Examples:
   $ sfdx force:apex:log:get -i <log id>
   $ sfdx force:apex:log:get -i <log id> -u me@my.org


=== force:apex:log:list
Usage: sfdx force:apex:log:list [-u <string>] [--json] [--loglevel <string>]

list debug logs

 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

When you execute this command in a project, it lists the log IDs for your default scratch org.

Examples:
   $ sfdx force:apex:log:list
   $ sfdx force:apex:log:list -u me@my.org


=== force:package2:manifest:create
Usage: sfdx force:package2:manifest:create -d <directory> [-v <string>] [--json] [--loglevel <string>]

create a manifest for the package2 from the specified directory

 -d, --directory DIRECTORY                       # directory that contains package2 contents to include in the manifest
 -v, --targetdevhubusername TARGETDEVHUBUSERNAME # username for the dev hub org; overrides default dev hub org
 --json                                          # format output as json
 --loglevel LOGLEVEL                             # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

The manifest must be in the directory specified when you create a package2 version.


=== force:package2:members:list
Usage: sfdx force:package2:members:list [-u <string>] [--json] [--loglevel <string>]

list all subscriber package2 members in the org

 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Lists the history of each package2 member: the package2 version when a member was first added (minimum), the latest package version that contains the member (current), and the latest version that contained any deleted members (maximum). The Subject Manageable State shows the state of the object referenced by the package2 member: beta, deleted, deprecated, installed, released, or unmanaged.


=== force:org:open
Usage: sfdx force:org:open [-p <string>] [-r] [-u <string>] [--json] [--loglevel <string>]

open an org in your browser

 -p, --path PATH                     # navigation url path
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -r, --urlonly                       # display navigation url, but don’t launch browser
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Opens your default scratch org, or another org that you specify.

To open a specific page, specify the portion of the URL after "yourInstance.salesforce.com/" as --path. 
For example, specify "--path one/one.app" to open Lightning Experience, or specify "--path /apex/YourPage" to open a Visualforce page.

To generate a URL but not launch your browser, specify --urlonly.

Examples:
  $ sfdx force:org:open
  $ sfdx force:org:open -u me@my.org
  $ sfdx force:org:open -u MyTestOrg1
  $ sfdx force:org:open -r -p one/one.app


=== force:source:open
Usage: sfdx force:source:open -f <file> [-r] [-u <string>] [--json] [--loglevel <string>]

edit a lightning page with lightning app builder

 -f, --sourcefile SOURCEFILE         # file to edit
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -r, --urlonly                       # generate a navigation url; don’t launch the editor
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If Force.com IDE 2 is installed, the file opens in an embedded browser within the IDE. If Force.com IDE 2 isn’t installed, the file opens in your default browser.
If no browser-based editor is available for the selected file, this command opens your org’s home page.
To generate a URL for the browser-based editor but not open the editor, use --urlonly.

Examples:
   $ sfdx force:source:open -f Property_Record_Page.flexipage-meta.xml
   $ sfdx force:source:open -f Property_Record_Page.flexipage-meta.xml -r


=== force:visualforce:page:create
Usage: sfdx force:visualforce:page:create -n <string> -l <string> [-t <string>] [-d <string>] [-a <string>] [--json] [--loglevel <string>]

create a visualforce page

 -a, --apiversion APIVERSION # api version number (40.0*,39.0)
 -l, --label LABEL           # visualforce page label
 -d, --outputdir OUTPUTDIR   # folder for saving the created files
 -n, --pagename PAGENAME     # name of the generated visualforce page
 -t, --template TEMPLATE     # template to use for file creation (DefaultVFPage*)
 --json                      # json output
 --loglevel LOGLEVEL         # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If not supplied, the apiversion, template, and outputdir use default values.
The outputdir can be an absolute path or relative to the current working directory.
Name and label are required.

Examples:
   $ sfdx force:visualforce:page:create -n mypage -l mylabel
   $ sfdx force:visualforce:page:create -n mypage -l mylabel -d pages


=== force:user:password:generate
Usage: sfdx force:user:password:generate [-u <string>] [-v <string>] [--json] [--loglevel <string>]

generate a password for a scratch org

 -v, --targetdevhubusername TARGETDEVHUBUSERNAME # username for the dev hub org; overrides default dev hub org
 -u, --targetusername TARGETUSERNAME             # username for the target org; overrides default target org
 --json                                          # format output as json
 --loglevel LOGLEVEL                             # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Generates a random password and sets it for the user of a scratch org.

If you haven’t set a default Dev Hub, or if your scratch org isn’t associated with your default Dev Hub, --targetdevhubusername is required.

To see a password that was previously generated, run "sfdx force:org:display".


=== force:user:permset:assign
Usage: sfdx force:user:permset:assign -n <string> [-u <string>] [--json] [--loglevel <string>]

assign a permission set to the admin user of an org

 -n, --permsetname PERMSETNAME       # the name of the permission set to assign
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Examples:
   $ sfdx force:user:permset:assign -n DreamHouse
   $ sfdx force:user:permset:assign -n DreamHouse -u me@my.org
   $ sfdx force:user:permset:assign -n DreamHouse -u TestOrg1


=== force:source:pull
Usage: sfdx force:source:pull [-w <minutes>] [-f] [-u <string>] [--json] [--loglevel <string>]

pull source from the scratch org to the project

 -f, --forceoverwrite                # ignore conflict warnings and overwrite changes to the project
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -w, --wait WAIT                     # wait time for command to finish in minutes (default: 33) (default:33, min:1)
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.


=== force:source:push
Usage: sfdx force:source:push [-w <minutes>] [-g] [-f] [-u <string>] [--json] [--loglevel <string>]

push source to an org from the project

 -f, --forceoverwrite                # ignore conflict warnings and overwrite changes to scratch org
 -g, --ignorewarnings                # deploy changes even if warnings are generated
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -w, --wait WAIT                     # wait time for command to finish in minutes (default: 33) (default:33, min:1)
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If the command detects a conflict, it displays the conflicts but does not complete the process. After reviewing the conflict, rerun the command with the --forceoverwrite parameter.


=== force:data:record:create
Usage: sfdx force:data:record:create -s <string> -v <string> [-u <string>] [--json] [--loglevel <string>]

create a record

 -s, --sobjecttype SOBJECTTYPE       # the type of the record you’re creating
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -v, --values VALUES                 # the <fieldName>=<value> pairs you’re creating
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

The format of a field-value pair is <fieldName>=<value>.
Enclose all field-value pairs in one set of double quotation marks.
Enclose values that contain spaces in single quotes.

Examples:
   $ sfdx force:data:record:create -s Account -v "Name=Acme"
   $ sfdx force:data:record:create -s Account -v "Name='Universal Containers'"
   $ sfdx force:data:record:create -s Account -v "Name='Universal Containers' Website=www.example.com"


=== force:data:record:delete
Usage: sfdx force:data:record:delete -s <string> [-i <id>] [-w <string>] [-u <string>] [--json] [--loglevel <string>]

delete a record

 -i, --sobjectid SOBJECTID           # the id of the record you’re deleting
 -s, --sobjecttype SOBJECTTYPE       # the type of the record you’re deleting
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -w, --where WHERE                   # a list of <fieldName>=<value> pairs to search for
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Specify an sObject type and either an ID or a list of <fieldName>=<value> pairs.
The format of a field-value pair is <fieldName>=<value>.
Enclose all field-value pairs in one set of double quotation marks.
Enclose values that contain spaces in single quotes.

Examples:
   $ sfdx force:data:record:delete -s Account -i 001D000000Kv3dl
   $ sfdx force:data:record:delete -s Account -w "Name=Acme"
   $ sfdx force:data:record:delete -s Account -w "Name='Universal Containers'"
   $ sfdx force:data:record:delete -s Account -w "Name='Universal Containers' Phone='(123) 456-7890'"


=== force:data:record:get
Usage: sfdx force:data:record:get -s <string> [-i <id>] [-w <string>] [-u <string>] [--json] [--loglevel <string>]

view a record

 -i, --sobjectid SOBJECTID           # the id of the record you’re retrieving
 -s, --sobjecttype SOBJECTTYPE       # the type of the record you’re retrieving
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -w, --where WHERE                   # a list of <fieldName>=<value> pairs to search for
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Specify an sObject type and either an ID or a list of <fieldName>=<value> pairs.
The format of a field-value pair is <fieldName>=<value>.
Enclose all field-value pairs in one set of double quotation marks.
Enclose values that contain spaces in single quotes.

Examples:
   $ sfdx force:data:record:get -s Account -i 001D000000Kv3dl
   $ sfdx force:data:record:get -s Account -w "Name=Acme"
   $ sfdx force:data:record:get -s Account -w "Name='Universal Containers'"
   $ sfdx force:data:record:get -s Account -w "Name='Universal Containers' Phone='(123) 456-7890'"


=== force:data:record:update
Usage: sfdx force:data:record:update -s <string> -v <string> [-i <id>] [-w <string>] [-u <string>] [--json] [--loglevel <string>]

update a record

 -i, --sobjectid SOBJECTID           # the id of the record you’re updating
 -s, --sobjecttype SOBJECTTYPE       # the type of the record you’re updating
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -v, --values VALUES                 # the <fieldName>=<value> pairs you’re updating
 -w, --where WHERE                   # a list of <fieldName>=<value> pairs to search for
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

The format of a field-value pair is <fieldName>=<value>.
Enclose all field-value pairs in one set of double quotation marks.
Enclose values that contain spaces in single quotes.

Examples:
  $ sfdx force:data:record:update -s Account -i 001D000000Kv3dl -v "Name=NewAcme"
  $ sfdx force:data:record:update -s Account -w "Name='Old Acme'" -v "Name='New Acme'"
  $ sfdx force:data:record:update -s Account -i 001D000000Kv3dl -v "Name='Acme III' Website=www.example.com"


=== force:mdapi:retrieve
Usage: sfdx force:mdapi:retrieve -r <directory> [-a <number>] [-w <minutes>] [-k <filepath>] [-d <directory>] [-p <string>...] [-s] [-i <id>] [-u <string>] [--json] [--loglevel <string>] [--verbose]

retrieves metadata from an org using metadata api

 -a, --apiversion APIVERSION               # target api version for the retrieve (default 40.0)
 -i, --jobid JOBID                         # job ID of the retrieve you want to check
 -p, --packagenames PACKAGENAMES           # a comma-separated list of packages to retrieve
 -r, --retrievetargetdir RETRIEVETARGETDIR # directory root for the retrieved files
 -s, --singlepackage                       # a single-package retrieve (default: false)
 -d, --sourcedir SOURCEDIR                 # source dir to use instead of default manifest sfdx-project.xml
 -u, --targetusername TARGETUSERNAME       # username for the target org; overrides default target org
 -k, --unpackaged UNPACKAGED               # file path of manifest of components to retrieve
 -w, --wait WAIT                           # wait time for command to finish in minutes (default: -1 (no limit))
 --json                                    # format output as json
 --loglevel LOGLEVEL                       # logging level for this command invocation (error*,trace,debug,info,warn,fatal)
 --verbose                                 # verbose output of retrieve result

The default target username is the admin user for the default scratch org. You can retrieve and deploy up to 10,000 files or 400 MB (39 MB compressed) at one time.


=== force:alias:set
Usage: sfdx force:alias:set name=value... [--json] [--loglevel <string>]

set username aliases for sfdx

 --json              # format output as json
 --loglevel LOGLEVEL # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

You can associate an alias with only one username at a time. If you’ve set an alias multiple times, the alias points to the most recent username.

To delete an alias, run "sfdx force:alias:set" with no username.

Examples:
   $ sfdx force:alias:set DefaultOrg=me@my.org
   $ sfdx force:alias:set DefaultOrg=me@my.org DevHubOrg=me@myhub.org
   $ sfdx force:alias:set AliasToDelete=


=== force:config:set
Usage: sfdx force:config:set name=value... [-g] [--json] [--loglevel <string>]

set config vars for sfdx

 -g, --global        # set config var globally (to be used from any directory)
 --json              # format output as json
 --loglevel LOGLEVEL # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Sets the configuration variables that the Salesforce CLI uses for various commands and tasks. Local variables apply only to your current project. Global variables apply in any directory.

Examples:
   $ sfdx force:config:set defaultusername=me@my.org defaultdevhubusername=me@myhub.org
   $ sfdx force:config:set defaultdevhubusername=me@myhub.org -g


=== force:auth:sfdxurl:store
Usage: sfdx force:auth:sfdxurl:store -f <filepath> [-d] [-s] [-a <string>] [--json] [--loglevel <string>]

authorize an org using an sfdx auth url

 -a, --setalias SETALIAS        # set an alias for for the authenticated org
 -d, --setdefaultdevhubusername # set the authenticated org as the default dev hub org for scratch org creation
 -s, --setdefaultusername       # set the authenticated org as the default username that all commands run against
 -f, --sfdxurlfile SFDXURLFILE  # path to a file containing the sfdx url
 --json                         # format output as json
 --loglevel LOGLEVEL            # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Authorize a Salesforce org using an SFDX auth URL stored within a file.
The file must have use format "force://(<clientId>:<clientSecret>:)?<refreshToken>@<instanceUrl>", where "?" denotes an option value.
The file must contain only the URL or be a JSON file that has a top-level property named sfdxAuthUrl.

Examples:
   $ sfdx force:auth:sfdxurl:store -f <path to sfdxAuthUrl file>
   $ sfdx force:auth:sfdxurl:store -f <path to sfdxAuthUrl file> -s -a MyDefaultOrg


=== force:schema:sobject:describe
Usage: sfdx force:schema:sobject:describe [-s <string>] [-u <string>] [--json] [--loglevel <string>]

describe an object

 -s, --sobjecttype SOBJECTTYPE       # the api name of the object to describe
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Examples:
   $ sfdx force:schema:sobject:describe -s Account
   $ sfdx force:schema:sobject:describe -s MyObject__c


=== force:schema:sobject:list
Usage: sfdx force:schema:sobject:list -c <string> [-u <string>] [--json] [--loglevel <string>]

list all objects of a type

 -c, --sobjecttypecategory SOBJECTTYPECATEGORY # the type of objects to list (all|custom|standard)
 -u, --targetusername TARGETUSERNAME           # username for the target org; overrides default target org
 --json                                        # format output as json
 --loglevel LOGLEVEL                           # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Examples:
   $ sfdx force:schema:sobject:list -c all
   $ sfdx force:schema:sobject:list -c custom
   $ sfdx force:schema:sobject:list -c standard


=== force:data:soql:query
Usage: sfdx force:data:soql:query -q <string> [-t] [-u <string>] [--json] [--loglevel <string>]

execute a soql query

 -q, --query QUERY                   # soql query to execute
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -t, --usetoolingapi                 # execute query with tooling api
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

When you execute this command in a project, it executes the query against the data in your default scratch org.

Examples:
   $ sfdx force:data:soql:query -q "SELECT Id, Name, Account.Name FROM Contact"
   $ sfdx force:data:soql:query -q "SELECT Id, Name FROM Account WHERE ShippingState IN ('CA', 'NY')"
   $ sfdx force:data:soql:query -q "SELECT Name FROM ApexTrigger" -t


=== force:source:status
Usage: sfdx force:source:status [-a] [-l] [-r] [-u <string>] [--json] [--loglevel <string>]

list local changes and/or changes in a scratch org

 -a, --all                           # list all the changes that have been made
 -l, --local                         # list the changes that have been made locally
 -r, --remote                        # list the changes that have been made in the scratch org
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Examples:
   $ sfdx force:source:status -l
   $ sfdx force:source:status -r
   $ sfdx force:source:status -a
   $ sfdx force:source:status -a -u me@my.org --json


=== force:lightning:test:create
Usage: sfdx force:lightning:test:create -n <string> [-t <string>] [-d <string>] [--json] [--loglevel <string>]

create a lightning test

 -d, --outputdir OUTPUTDIR # folder for saving the created files
 -t, --template TEMPLATE   # template to use for file creation (DefaultLightningTest*)
 -n, --testname TESTNAME   # name of the generated lightning test
 --json                    # json output
 --loglevel LOGLEVEL       # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

The outputdir can be an absolute path or relative to the current working directory.

Examples:
   $ sfdx force:lightning:test:create -n MyLightningTest
   $ sfdx force:lightning:test:create -n MyLightningTest -d lightningTests


=== force:apex:test:report
Usage: sfdx force:apex:test:report -i <id> [-c] [-d <directory>] [-r <string>] [-w <minutes>] [-u <string>] [--json] [--loglevel <string>] [--verbose]

display test results

 -c, --codecoverage                  # retrieve code coverage results
 -d, --outputdir OUTPUTDIR           # directory to store test run files
 -r, --resultformat RESULTFORMAT     # test result format emitted to stdout; --json flag overrides this parameter (human*,tap,junit,json)
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -i, --testrunid TESTRUNID           # id of test run
 -w, --wait WAIT                     # the streaming client socket timeout (in minutes) (default:6, min:2)
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)
 --verbose                           # display apex test processing details

Displays test results for an enqueued or completed asynchronous Apex test run.

Examples:
   $ sfdx force:apex:test:report -i <test run id>
   $ sfdx force:apex:test:report -i <test run id> -r junit
   $ sfdx force:apex:test:report -i <test run id> -c --json


=== force:apex:test:run
Usage: sfdx force:apex:test:run (-n <string>... | -s <string>...) [-c] [-d <directory>] [-l <string>] [-r <string>] [-u <string>] [--json] [--loglevel <string>] [--verbose]

invoke apex tests

 -n, --classnames CLASSNAMES         # comma-separated list of apex test class names to execute
 -c, --codecoverage                  # retrieve code coverage results
 -d, --outputdir OUTPUTDIR           # directory to store test run files
 -r, --resultformat RESULTFORMAT     # test result format emitted to stdout; --json flag overrides this parameter (human*,tap,junit,json)
 -s, --suitenames SUITENAMES         # comma-separated list of apex test suite names to execute
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -l, --testlevel TESTLEVEL           # testlevel enum value (RunLocalTests,RunAllTestsInOrg,RunSpecifiedTests)
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)
 --verbose                           # display apex test processing details

By default, runs all Apex tests in the org’s namespace.
To run specific tests, specify the class names or suite names or set a --testlevel value.

Examples:
   $ sfdx force:apex:test:run
   $ sfdx force:apex:test:run -n MyClassTest,MyOtherClassTest -r human
   $ sfdx force:apex:test:run -s MySuite,MyOtherSuite -c --json
   $ sfdx force:apex:test:run -l RunLocalTests -d <path to outputdir> -u me@my.org


=== force:lightning:test:run
Usage: sfdx force:lightning:test:run [-a <string>] [-d <directory>] [-r <string>] [-f <filepath>] [-o] [-t <number>] [-u <string>] [--json] [--loglevel <string>]

invoke lightning component tests

 -a, --appname APPNAME               # name of your lightning test application
 -f, --configfile CONFIGFILE         # path to config file for the test
 -o, --leavebrowseropen              # leave browser open
 -d, --outputdir OUTPUTDIR           # directory path to store test run artifacts: log files, test results, etc
 -r, --resultformat RESULTFORMAT     # test result format emitted to stdout; --json flag overrides this parameter (human*,tap,junit,json)
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 -t, --timeout TIMEOUT               # time (ms) to wait for element in dom (default:20000)
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Examples:
   $ sfdx force:lightning:test:run
   $ sfdx force:lightning:test:run -a tests -r human
   $ sfdx force:lightning:test:run -f config/myConfigFile.json -d testResultFolder


=== force:data:tree:export
Usage: sfdx force:data:tree:export -q <string> [-p] [-x <string>] [-d <directory>] [-u <string>] [--json] [--loglevel <string>]

export data from an org into sobject tree format for force:data:tree:import consumption

 -d, --outputdir OUTPUTDIR           # directory to store files
 -p, --plan                          # generate mulitple sobject tree files and a plan definition file for aggregated import
 -x, --prefix PREFIX                 # prefix of generated files
 -q, --query QUERY                   # soql query, or filepath of file containing a soql query, to retrieve records
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Generates JSON files for use with the force:data:tree:import command.

Examples:
   $ sfdx force:data:tree:export -q "SELECT Id, Name, (SELECT Name, Address__c FROM Properties__r) FROM Broker__c"
   $ sfdx force:data:tree:export -q <path to file containing soql query> -x export-demo -d /tmp/sfdx-out -p


=== force:data:tree:import
Usage: sfdx force:data:tree:import (-f <filepath>... | -p <filepath>) [-c <string>] [--confighelp] [-u <string>] [--json] [--loglevel <string>]

import data into an org using sobject tree api

 -c, --contenttype CONTENTTYPE           # if data file extension is not .json, provide content type (applies to all files)
 -p, --plan PLAN                         # path to plan to insert multiple data files that have master-detail relationships
 -f, --sobjecttreefiles SOBJECTTREEFILES # ordered paths of json files containing collection of record trees to insert
 -u, --targetusername TARGETUSERNAME     # username for the target org; overrides default target org
 --confighelp                            # display schema information for the --plan configuration file to stdout; if you use this option, all other options except --json are ignored
 --json                                  # format output as json
 --loglevel LOGLEVEL                     # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

To generate JSON files for use with force:data:tree:import, run "sfdx force:data:tree:export".

Examples:
   $ sfdx force:data:tree:import -p data/accounts-contacts-plan.json -u me@my.org
   $ sfdx force:data:tree:import -f data/accounts-only.json data/contacts-only-1.json
   $ sfdx force:data:tree:import -p ./test/data/accounts-contacts-plan.json


=== force:project:upgrade
Usage: sfdx force:project:upgrade [-f] [--json] [--loglevel <string>]

update project config files to the latest format

 -f, --forceupgrade  # run all upgrades even if project has already been upgraded
 --json              # format output as json
 --loglevel LOGLEVEL # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Examples:
 $   sfdx force:project:upgrade
 $   sfdx force:project:upgrade -f


=== force:package1:version:create
Usage: sfdx force:package1:version:create -i <id> -n <string> [-d <string>] [-v <string>] [-m] [-r <url>] [-p <url>] [-k <string>] [-w <number>] [-u <string>] [--json] [--loglevel <string>]

create a new package version in the release org

 -d, --description DESCRIPTION         # package version description
 -k, --installationkey INSTALLATIONKEY # installation key for key-protected package (default: null)
 -m, --managedreleased                 # create a managed package version
 -n, --name NAME                       # package version name
 -i, --packageid PACKAGEID             # id of the metadata package (starts with 033) of which you’re creating a new version
 -p, --postinstallurl POSTINSTALLURL   # post install url
 -r, --releasenotesurl RELEASENOTESURL # release notes url
 -u, --targetusername TARGETUSERNAME   # username for the target org; overrides default target org
 -v, --version VERSION                 # package version in major.minor format, for example, 3.2
 -w, --wait WAIT                       # minutes to wait for the package version to be created (default: 2 minutes)
 --json                                # format output as json
 --loglevel LOGLEVEL                   # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

The package version is based on the contents of the specified metadata package. Omit -m if you want to create an unmanaged package version.


=== force:package2:version:create
Usage: sfdx force:package2:version:create -i <id> -d <directory> [-b <string>] [-t <string>] [-w <minutes>] [-v <string>] [--json] [--loglevel <string>]

create a package2 version in the dev hub org

 -b, --branch BRANCH                             # the package2 version's branch
 -d, --directory DIRECTORY                       # directory that contains the manifest, descriptor, and contents of the package2 version
 -i, --package2id PACKAGE2ID                     # id of the parent package2 (starts with 0Ho)
 -t, --tag TAG                                   # the package2 version's tag
 -v, --targetdevhubusername TARGETDEVHUBUSERNAME # username for the dev hub org; overrides default dev hub org
 -w, --wait WAIT                                 # minutes to wait for the package2 version to be created (default:0)
 --json                                          # format output as json
 --loglevel LOGLEVEL                             # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

The package2 version is based on the manifest, descriptor, and package2 contents in the specified directory.

To retrieve details about a package2 version create request, including status and package2 version id (05i), run "sfdx force:package2:version:create:get -i 08c...".

To list package2 version creation requests in the org, run "sfdx force:package2:version:create:list".

Examples:
   $ sfdx force:package2:version:create --package2id 0Ho... --directory common --tag 'Release 1.0.0' --branch master
   $ sfdx force:package2:version:create -i 0Ho... -d common


=== force:package1:version:create:get
Usage: sfdx force:package1:version:create:get -i <id> [-u <string>] [--json] [--loglevel <string>]

retrieve status of package upload request

 -i, --requestid REQUESTID           # packageuploadrequest id
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Displays the status of a package upload request.


=== force:package2:version:create:get
Usage: sfdx force:package2:version:create:get -i <id> [-v <string>] [--json] [--loglevel <string>]

retrieve a package2 version creation request in the dev hub org

 -i, --package2createrequestid PACKAGE2CREATEREQUESTID # package2 version creation request id (starts with 08c)
 -v, --targetdevhubusername TARGETDEVHUBUSERNAME       # username for the dev hub org; overrides default dev hub org
 --json                                                # format output as json
 --loglevel LOGLEVEL                                   # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Specify the request ID for which you want to view details. If applicable, the command displays errors related to the request.

Examples:
   $ sfdx force:package2:version:create:get --package2createrequestid 08c...

To show all requests in the org, run "sfdx package2:version:create:list".


=== force:package2:version:create:list
Usage: sfdx force:package2:version:create:list [-c <number>] [-s <string>] [-v <string>] [--json] [--loglevel <string>]

list package2 version creation requests in the dev hub org

 -c, --createdlastdays CREATEDLASTDAYS           # created in the last specified number of days (starting at 00:00:00 of first day to now; 0 for today)
 -s, --status STATUS                             # filter the list by version creation request status (Queued,InProgress,Success,Error)
 -v, --targetdevhubusername TARGETDEVHUBUSERNAME # username for the dev hub org; overrides default dev hub org
 --json                                          # format output as json
 --loglevel LOGLEVEL                             # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Shows the details of each request to create a package2 version that's run in the Dev Hub org.

All filter parameters are applied using the AND logical operator (not OR).

To get information about a specific request, run "sfdx force:package2:version:create:get" and supply the request ID.

Examples:
   $ sfdx force:package2:version:create:list
   $ sfdx force:package2:version:create:list --createdlastdays 3
   $ sfdx force:package2:version:create:list --status Error
   $ sfdx force:package2:version:create:list -s InProgress
   $ sfdx force:package2:version:create:list -c 3 -s Success


=== force:package1:version:display
Usage: sfdx force:package1:version:display -i <id> [-u <string>] [--json] [--loglevel <string>]

display details about a package version

 -i, --packageversionid PACKAGEVERSIONID # metadata package version id (starts with 04t)
 -u, --targetusername TARGETUSERNAME     # username for the target org; overrides default target org
 --json                                  # format output as json
 --loglevel LOGLEVEL                     # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

You can view the metadata package ID, name, release state, and build number.


=== force:package2:version:get
Usage: sfdx force:package2:version:get -i <id> [-v <string>] [--json] [--loglevel <string>]

retrieve a package version in the dev hub org

 -i, --package2versionid PACKAGE2VERSIONID       # the package2 version id (starts wtih 05i)
 -v, --targetdevhubusername TARGETDEVHUBUSERNAME # username for the dev hub org; overrides default dev hub org
 --json                                          # format output as json
 --loglevel LOGLEVEL                             # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Examples:
   $ sfdx force:package2:version:get --package2versionid 05i...

To update package version values, run "sfdx force:package2:version:update".


=== force:package2:version:install
Usage: sfdx force:package2:version:install -i <id> [-u <string>] [--json] [--loglevel <string>]

install a subscriber package2 version

 -i, --subscriberpackage2versionid SUBSCRIBERPACKAGE2VERSIONID # the id of the subscriber package2 version to install (starts with 04t)
 -u, --targetusername TARGETUSERNAME                           # username for the target org; overrides default target org
 --json                                                        # format output as json
 --loglevel LOGLEVEL                                           # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Installs a second-generation subscriber package version in the target org. To view the error messages, open the Dev Hub org, select the Setup menu, enter Deployment in the Quick Find box, and select Deployment Status.

Examples:
   $ sfdx force:package2:version:install --subscriberpackage2versionid 04t...
   $ sfdx force:package2:version:install -i 04t... -u <username of target org>

To find the ID for the subscriber package2 version, run "sfdx package2:version:list".
To list the org’s installed subscriber package2 versions, run "package2:installed:list".


=== force:package1:version:list
Usage: sfdx force:package1:version:list [-i <id>] [-u <string>] [--json] [--loglevel <string>]

list package versions for the specified package or for the org

 -i, --packageid PACKAGEID           # metadata package id (starts with 033)
 -u, --targetusername TARGETUSERNAME # username for the target org; overrides default target org
 --json                              # format output as json
 --loglevel LOGLEVEL                 # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

If a metadata package ID is specified, lists all versions of the specified package. Otherwise, lists all package versions for the org. For each package version, the list includes the package version ID, metadata package ID, name, version number, and release state.


=== force:package2:version:list
Usage: sfdx force:package2:version:list [-c <number>] [-m <number>] [-i <string>...] [-r] [-o <string>...] [-v <string>] [--concise] [--json] [--loglevel <string>] [--verbose]

list all package2 versions in the dev hub org

 -c, --createdlastdays CREATEDLASTDAYS           # created in the last specified number of days (starting at 00:00:00 of first day to now; 0 for today)
 -m, --modifiedlastdays MODIFIEDLASTDAYS         # list items modified in the last given number of days (starting at 00:00:00 of first day to now; 0 for today)
 -o, --orderby ORDERBY                           # order by the specified package2 version fields
 -i, --package2ids PACKAGE2IDS                   # filter results on specified comma-delimited package2 ids (start with 0Ho)
 -r, --released                                  # display released versions only
 -v, --targetdevhubusername TARGETDEVHUBUSERNAME # username for the dev hub org; overrides default dev hub org
 --concise                                       # display limited package2 version details
 --json                                          # format output as json
 --loglevel LOGLEVEL                             # logging level for this command invocation (error*,trace,debug,info,warn,fatal)
 --verbose                                       # display extended package2 versions detail

Displays details of each package2 version in the org.

Use --concise or --verbose to display limited or additional details, respectively.

All filter parameters are applied using the AND logical operator (not OR).

Examples:
   $ sfdx force:package2:version:list --verbose --createdlastdays 3 --released --orderby PatchVersion
   $ sfdx force:package2:version:list --package2ids 0Ho000000000000,0Ho000000000001 --released --modifiedlastdays 0
   $ sfdx force:package2:version:list --released
   $ sfdx force:package2:version:list --concise --modifiedlastdays 0
   $ sfdx force:package2:version:list --concise -c 3 -r


=== force:package2:version:uninstall
Usage: sfdx force:package2:version:uninstall -i <id> [-u <string>] [--json] [--loglevel <string>]

uninstall a subscriber package2 version

 -i, --subscriberpackage2versionid SUBSCRIBERPACKAGE2VERSIONID # the id of the subscriber package2 version to uninstall (starts with 04t)
 -u, --targetusername TARGETUSERNAME                           # username for the target org; overrides default target org
 --json                                                        # format output as json
 --loglevel LOGLEVEL                                           # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Specify the subscriber package2 version ID.

Examples:
   $ sfdx force:package2:version:uninstall --subscriberpackage2versionid 04t...
   $ sfdx force:package2:version:uninstall -i 04t... -u <username of target org>

To list the org’s installed subscriber package2 versions, run "package2:installed:list".


=== force:package2:version:update
Usage: sfdx force:package2:version:update -i <id> [-n <string>] [-d <string>] [-b <string>] [-t <string>] [-s] [-v <string>] [--json] [--loglevel <string>]

update a package2 version in the dev hub org

 -b, --branch BRANCH                             # the package2 version branch
 -d, --description DESCRIPTION                   # the package2 version description
 -n, --name NAME                                 # the package2 version name
 -i, --package2versionid PACKAGE2VERSIONID       # the package2 version id (starts wtih 05i)
 -s, --setasreleased                             # set the package2 version as released (can't be undone)
 -t, --tag TAG                                   # the package2 version tag
 -v, --targetdevhubusername TARGETDEVHUBUSERNAME # username for the dev hub org; overrides default dev hub org
 --json                                          # format output as json
 --loglevel LOGLEVEL                             # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

Specify a new value for each option you want to update.

Examples:
   $ sfdx force:package2:version:update --package2versionid 05i... --setasreleased
   $ sfdx force:package2:version:update --i 05i... -b master -t 'Release 1.0.7'

To display details about a package2 version, run "sfdx package2:version:get".


=== force:auth:web:login
Usage: sfdx force:auth:web:login [-i <string>] [-r <url>] [-d] [-s] [-a <string>] [--json] [--loglevel <string>]

authorize an org using the web login flow

 -i, --clientid CLIENTID        # oauth client id (sometimes called the consumer key)
 -r, --instanceurl INSTANCEURL  # the login url of the instance the org lives on
 -a, --setalias SETALIAS        # set an alias for for the authenticated org
 -d, --setdefaultdevhubusername # set the authenticated org as the default dev hub org for scratch org creation
 -s, --setdefaultusername       # set the authenticated org as the default username that all commands run against
 --json                         # format output as json
 --loglevel LOGLEVEL            # logging level for this command invocation (error*,trace,debug,info,warn,fatal)

To log in to a sandbox, set --instanceurl to https://test.salesforce.com.

Examples:
   $ sfdx force:auth:web:login -a TestOrg1
   $ sfdx force:auth:web:login -i <oauth client id>
   $ sfdx force:auth:web:login -r https://test.salesforce.com


=== force:alias
Usage: sfdx force:alias:COMMAND [command-specific-options]

manage username aliases

Commands for force:alias, type "sfdx help force:alias:COMMAND" for more details:

 sfdx force:alias:list               # list username aliases for sfdx
 sfdx force:alias:set                # set username aliases for sfdx


=== force:apex
Usage: sfdx force:apex:COMMAND [command-specific-options]

work with apex code

Commands for force:apex, type "sfdx help force:apex:COMMAND" for more details:

 sfdx force:apex:class:create        # create an apex class
 sfdx force:apex:execute             # execute anonymous apex code
 sfdx force:apex:log:get             # fetch a debug log
 sfdx force:apex:log:list            # list debug logs
 sfdx force:apex:test:report         # display test results
 sfdx force:apex:test:run            # invoke apex tests


=== force:auth
Usage: sfdx force:auth:COMMAND [command-specific-options]

authorize an org for use with the cli

Commands for force:auth, type "sfdx help force:auth:COMMAND" for more details:

 sfdx force:auth:jwt:grant           # authorize an org using the jwt flow
 sfdx force:auth:sfdxurl:store       # authorize an org using an sfdx auth url
 sfdx force:auth:web:login           # authorize an org using the web login flow


=== force:config
Usage: sfdx force:config:COMMAND [command-specific-options]

configure the salesforce cli

Commands for force:config, type "sfdx help force:config:COMMAND" for more details:

 sfdx force:config:get               # get config var value(s) for given name(s)
 sfdx force:config:list              # list config vars for sfdx
 sfdx force:config:set               # set config vars for sfdx


=== force:data
Usage: sfdx force:data:COMMAND [command-specific-options]

manipulate records in your org

Commands for force:data, type "sfdx help force:data:COMMAND" for more details:

 sfdx force:data:bulk:delete         # bulk delete records from a csv file
 sfdx force:data:bulk:status         # view the status of a bulk data load job or batch
 sfdx force:data:bulk:upsert         # bulk upsert records from a csv file
 sfdx force:data:record:create       # create a record
 sfdx force:data:record:delete       # delete a record
 sfdx force:data:record:get          # view a record
 sfdx force:data:record:update       # update a record
 sfdx force:data:soql:query          # execute a soql query
 sfdx force:data:tree:export         # export data from an org into sobject tree format for force:data:tree:import consumption
 sfdx force:data:tree:import         # import data into an org using sobject tree api


=== force:doc
Usage: sfdx force:doc:COMMAND [command-specific-options]

display help for force commands

Commands for force:doc, type "sfdx help force:doc:COMMAND" for more details:

 sfdx force:doc:commands:display     # display help for force commands
 sfdx force:doc:commands:list        # list the force commands


=== force:lightning
Usage: sfdx force:lightning:COMMAND [command-specific-options]

create and test lightning bundles

Commands for force:lightning, type "sfdx help force:lightning:COMMAND" for more details:

 sfdx force:lightning:app:create     # create a lightning app
 sfdx force:lightning:component:create # create a lightning component
 sfdx force:lightning:event:create   # create a lightning event
 sfdx force:lightning:interface:create # create a lightning interface
 sfdx force:lightning:lint           # Linter for Lightning Components
 sfdx force:lightning:test:create    # create a lightning test
 sfdx force:lightning:test:run       # invoke lightning component tests


=== force:limits
Usage: sfdx force:limits:COMMAND [command-specific-options]

view your org’s limits

Commands for force:limits, type "sfdx help force:limits:COMMAND" for more details:

 sfdx force:limits:api:display       # display current org’s limits


=== force:mdapi
Usage: sfdx force:mdapi:COMMAND [command-specific-options]

retrieve and deploy metadata using metadata api

Commands for force:mdapi, type "sfdx help force:mdapi:COMMAND" for more details:

 sfdx force:mdapi:convert            # convert metadata api source into the sfdx source format
 sfdx force:mdapi:deploy             # deploys metadata to an org using metadata api
 sfdx force:mdapi:retrieve           # retrieves metadata from an org using metadata api


=== force:org
Usage: sfdx force:org:COMMAND [command-specific-options]

manage your sfdx orgs

Commands for force:org, type "sfdx help force:org:COMMAND" for more details:

 sfdx force:org:create               # create a scratch org
 sfdx force:org:delete               # mark a scratch org for deletion
 sfdx force:org:display              # get org description
 sfdx force:org:list                 # list all active orgs you’ve created or authenticated to
 sfdx force:org:open                 # open an org in your browser


=== force:package
Usage: sfdx force:package:COMMAND [command-specific-options]

install managed and unmanaged packages

Commands for force:package, type "sfdx help force:package:COMMAND" for more details:

 sfdx force:package:install          # install a package in the target org
 sfdx force:package:install:get      # retrieve status of package install request


=== force:package1
Usage: sfdx force:package1:COMMAND [command-specific-options]

work with managed and unmanaged packages

Commands for force:package1, type "sfdx help force:package1:COMMAND" for more details:

 sfdx force:package1:version:create  # create a new package version in the release org
 sfdx force:package1:version:create:get # retrieve status of package upload request
 sfdx force:package1:version:display # display details about a package version
 sfdx force:package1:version:list    # list package versions for the specified package or for the org


=== force:package2
Usage: sfdx force:package2:COMMAND [command-specific-options]

work with second-generation packages

Commands for force:package2, type "sfdx help force:package2:COMMAND" for more details:

 sfdx force:package2:create          # create a package2
 sfdx force:package2:installed:list  # list the org’s installed subscriber package2 versions
 sfdx force:package2:list            # list all package2 packages in the dev hub org
 sfdx force:package2:manifest:create # create a manifest for the package2 from the specified directory
 sfdx force:package2:members:list    # list all subscriber package2 members in the org
 sfdx force:package2:version:create  # create a package2 version in the dev hub org
 sfdx force:package2:version:create:get # retrieve a package2 version creation request in the dev hub org
 sfdx force:package2:version:create:list # list package2 version creation requests in the dev hub org
 sfdx force:package2:version:get     # retrieve a package version in the dev hub org
 sfdx force:package2:version:install # install a subscriber package2 version
 sfdx force:package2:version:list    # list all package2 versions in the dev hub org
 sfdx force:package2:version:uninstall # uninstall a subscriber package2 version
 sfdx force:package2:version:update  # update a package2 version in the dev hub org


=== force:project
Usage: sfdx force:project:COMMAND [command-specific-options]

set up a project

Commands for force:project, type "sfdx help force:project:COMMAND" for more details:

 sfdx force:project:create           # create a new SFDX project
 sfdx force:project:upgrade          # update project config files to the latest format


=== force:schema
Usage: sfdx force:schema:COMMAND [command-specific-options]

edit standard and custom objects

Commands for force:schema, type "sfdx help force:schema:COMMAND" for more details:

 sfdx force:schema:sobject:describe  # describe an object
 sfdx force:schema:sobject:list      # list all objects of a type


=== force:source
Usage: sfdx force:source:COMMAND [command-specific-options]

sync your project with your orgs

Commands for force:source, type "sfdx help force:source:COMMAND" for more details:

 sfdx force:source:convert           # convert sfdx source into the metadata api source format
 sfdx force:source:open              # edit a lightning page with lightning app builder
 sfdx force:source:pull              # pull source from the scratch org to the project
 sfdx force:source:push              # push source to an org from the project
 sfdx force:source:status            # list local changes and/or changes in a scratch org


=== force:user
Usage: sfdx force:user:COMMAND [command-specific-options]

perform user-related admin tasks

Commands for force:user, type "sfdx help force:user:COMMAND" for more details:

 sfdx force:user:password:generate   # generate a password for a scratch org
 sfdx force:user:permset:assign      # assign a permission set to the admin user of an org


=== force:visualforce
Usage: sfdx force:visualforce:COMMAND [command-specific-options]

create and edit visualforce files

Commands for force:visualforce, type "sfdx help force:visualforce:COMMAND" for more details:

 sfdx force:visualforce:component:create # create a visualforce component
 sfdx force:visualforce:page:create  # create a visualforce page


=== force:
Usage: sfdx force: [-v] [--json] [--loglevel <string>]

 -v, --version       # display the salesforce api version
 --json              # format output as json
 --loglevel LOGLEVEL # logging level for this command invocation (error*,trace,debug,info,warn,fatal)


=== force:apex
Usage: sfdx force:apex:COMMAND [command-specific-options]

work with apex code

Commands for force:apex, type "sfdx help force:apex:COMMAND" for more details:

 sfdx force:apex:class:create        # create an apex class
 sfdx force:apex:execute             # execute anonymous apex code
 sfdx force:apex:log:get             # fetch a debug log
 sfdx force:apex:log:list            # list debug logs
 sfdx force:apex:test:report         # display test results
 sfdx force:apex:test:run            # invoke apex tests


=== force:visualforce
Usage: sfdx force:visualforce:COMMAND [command-specific-options]

create and edit visualforce files

Commands for force:visualforce, type "sfdx help force:visualforce:COMMAND" for more details:

 sfdx force:visualforce:component:create # create a visualforce component
 sfdx force:visualforce:page:create  # create a visualforce page


=== force:lightning
Usage: sfdx force:lightning:COMMAND [command-specific-options]

create and test lightning bundles

Commands for force:lightning, type "sfdx help force:lightning:COMMAND" for more details:

 sfdx force:lightning:app:create     # create a lightning app
 sfdx force:lightning:component:create # create a lightning component
 sfdx force:lightning:event:create   # create a lightning event
 sfdx force:lightning:interface:create # create a lightning interface
 sfdx force:lightning:lint           # Linter for Lightning Components
 sfdx force:lightning:test:create    # create a lightning test
 sfdx force:lightning:test:run       # invoke lightning component tests


=== force:project
Usage: sfdx force:project:COMMAND [command-specific-options]

set up a project

Commands for force:project, type "sfdx help force:project:COMMAND" for more details:

 sfdx force:project:create           # create a new SFDX project
 sfdx force:project:upgrade          # update project config files to the latest format


